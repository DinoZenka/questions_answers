{"version":3,"sources":["components/question.js","App.js","index.js"],"names":["useInput","initialValue","validations","isReset","React","useState","value","setValue","isDirty","setDirty","valid","validators","isEmpty","setEmpty","isMinLength","setMinLength","isInputValid","setInputValid","useEffect","length","useValidation","onChange","e","target","onBlur","Question","question","id","isFormValid","initial","val","minLength","current","b","className","htmlFor","style","color","type","name","placeholder","required","App","questions","setQuestions","answers","setAnswers","isLoading","setLoading","isAllValid","setAllValid","isSuccess","setSuccess","allValids","useRef","a","fetch","then","data","json","getchData","newObj","localStorObject","JSON","parse","localStorage","getItem","ques","map","elem","onClick","canSend","Object","values","toLocalObject","forEach","el","entries","quest","answ","setItem","stringify","setTimeout","Swal","fire","title","text","icon","didClose","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQA0CMA,EAAW,SAACC,EAAcC,EAAaC,GAAa,IAAD,EAC7BC,IAAMC,SAASJ,GADc,mBAChDK,EADgD,KACzCC,EADyC,OAE3BH,IAAMC,UAAS,GAFY,mBAEhDG,EAFgD,KAEvCC,EAFuC,KAGjDC,EA1Cc,SAACJ,EAAOK,GAAgB,IAAD,EACfP,IAAMC,UAAS,GADA,mBACpCO,EADoC,KAC3BC,EAD2B,OAEPT,IAAMC,UAAS,GAFR,mBAEpCS,EAFoC,KAEvBC,EAFuB,OAGLX,IAAMC,UAAS,GAHV,mBAGpCW,EAHoC,KAGtBC,EAHsB,KA8B3C,OAxBAb,IAAMc,WAAU,WACd,IAAK,IAAMR,KAASC,EAClB,OAAQD,GACN,IAAK,UACKG,GAARP,GACA,MAEF,IAAK,YACHA,EAAMa,QAAUR,EAAWD,GAASK,GAAa,GAASA,GAAa,MAK5E,CAACT,IAEJF,IAAMc,WAAU,WAEZD,GADEL,IAAWE,KAKd,CAACA,EAAaF,IAGV,CACLA,UACAE,cACAE,gBASYI,CAAcd,EAAOJ,GAUnC,OAAO,aACLI,QACAe,SAVe,SAACC,GAChBf,EAASe,EAAEC,OAAOjB,QAUlBkB,OAPa,SAACF,GACdb,GAAS,IAOTD,WACGE,IA+BQe,EA1BE,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,GAAIC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACvCC,EAAM9B,EAAS6B,EAAS,CAAEjB,SAAS,EAAMmB,UAAW,IAI1D,OAFAH,IAAcI,QAAQL,GAAtB,aAA8BM,EAAGH,EAAId,cAAeU,EAAWI,EAAIxB,OAGjE,sBAAK4B,UAAU,qBAAf,UACE,uBAAOA,UAAU,WAAWC,QAAO,eAAUR,GAA7C,SAAoDD,IAElDI,EAAItB,SAAWsB,EAAIlB,SAAY,qBAAKwB,MAAO,CAAEC,MAAO,OAArB,gJAC/BP,EAAItB,SAAWsB,EAAIhB,aAAgB,qBAAKsB,MAAO,CAAEC,MAAO,OAArB,iMACrC,uBACEV,GAAE,eAAUA,GACZO,UAAU,SACVI,KAAK,OACLhC,MAAOwB,EAAIxB,MACXe,SAAU,SAACC,GAAD,OAAOQ,EAAIT,SAASC,IAC9BE,OAAQ,SAACF,GAAD,OAAOQ,EAAIN,OAAOF,IAC1BiB,KAAMb,EACNc,YAAa,6EACbC,UAAQ,Q,kCCqBDC,EApGH,WAAO,IAAD,EAEkBtC,IAAMC,SAAS,IAFjC,mBAETsC,EAFS,KAEEC,EAFF,OAGcxC,IAAMC,SAAS,IAH7B,mBAGTwC,EAHS,KAGAC,EAHA,OAIgB1C,IAAMC,UAAS,GAJ/B,mBAIT0C,EAJS,KAIEC,EAJF,OAKkB5C,IAAMC,UAAS,GALjC,mBAKT4C,EALS,KAKGC,EALH,OAMgB9C,IAAMC,UAAS,GAN/B,mBAMT8C,EANS,KAMEC,EANF,KAQZC,EAAYjD,IAAMkD,OAAO,IAE7BlD,IAAMc,WAAU,YACC,uCAAG,4BAAAqC,EAAA,6DAChBP,GAAW,GADK,SAEGQ,MAAM,aAAaC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAFxC,OAEVD,EAFU,OAGhBd,EAAac,EAAKA,MAClBV,GAAW,GAJK,2CAAH,qDAMfY,KACC,IAEHxD,IAAMc,WAAU,WAEd,IAAM2C,EAAS,GACTC,EAAkBC,KAAKC,MAAMC,aAAaC,QAAQ,UACxD,GAAIJ,EACFhB,EAAWgB,OADb,CAJoB,oBAQNnB,GARM,IAQpB,2BAAyB,CACvBkB,EADuB,QACdnC,UAAY,IATH,8BAWpBoB,EAAWe,MACV,CAAClB,IAEJ,IAAMf,EAAc,WAClB,OAAOyB,GAGHc,EAAOxB,EAAUyB,KAAI,SAAAC,GACzB,OAAO,cAAC,EAAD,CACL3C,SAAU2C,EAAK3C,SAEfC,GAAI0C,EAAK1C,GACTC,YAAaA,EACbC,QAASgB,EAAQwB,EAAK3C,WAHjB2C,EAAK1C,OAsCd,OAAIwB,EACK,cAAC,IAAD,IAIP,qBAAKjB,UAAU,iBAAf,SAEIa,EACI,uBAAMb,UAAU,OAAhB,UAEEiC,GAEClB,GAAe,qBAAKb,MAAO,CAAEC,MAAO,OAArB,oGAClB,wBAAQH,UAAU,cAAcoC,QA5C3B,SAAChD,GAEd,IADA,IAAIiD,GAAU,EACd,MAAoBC,OAAOC,OAAOpB,EAAUrB,SAA5C,eAAsD,CACpDuC,GADc,KACGtC,EAEnBiB,EAAYqB,GACZ,IAAMV,EAAM,eAAQhB,GACd6B,EAAa,eAAQ7B,GAEvB0B,IACFC,OAAOC,OAAOpB,EAAUrB,SAAS2C,SAAQ,SAAAC,GAAO,IAAD,cACvBJ,OAAOK,QAAQD,GAAI,GADI,GACtCE,EADsC,KAC/BC,EAD+B,KAE7ClB,EAAOiB,GAAS,GAChBJ,EAAcI,GAASC,KAEzBd,aAAae,QAAQ,QAASjB,KAAKkB,UAAUP,IAE7C5B,EAAWe,GACXT,GAAW,GACX8B,YAAW,WACTC,IAAKC,KAAK,CACRC,MAAO,8FAAoBC,KAAM,6JAA2CC,KAAM,UAAWC,SAAU,WACrGpC,GAAW,QAGd,MAGL9B,EAAEmE,kBAgBM,uEAEA,oDC/FZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5e42400f.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst useValidation = (value, validators) => {\n  const [isEmpty, setEmpty] = React.useState(true);\n  const [isMinLength, setMinLength] = React.useState(true);\n  const [isInputValid, setInputValid] = React.useState(true);\n\n\n  React.useEffect(() => {\n    for (const valid in validators) {\n      switch (valid) {\n        case \"isEmpty\": {\n          value ? setEmpty(false) : setEmpty(true);\n          break;\n        }\n        case \"minLength\": {\n          value.length >= validators[valid] ? setMinLength(false) : setMinLength(true);\n          break;\n        }\n      }\n    }\n  }, [value]);\n\n  React.useEffect(() => {\n    if (isEmpty || isMinLength) {\n      setInputValid(false);\n    } else {\n      setInputValid(true);\n    }\n  }, [isMinLength, isEmpty]);\n\n\n  return {\n    isEmpty,\n    isMinLength,\n    isInputValid\n  }\n}\n\n\n\nconst useInput = (initialValue, validations, isReset) => {\n  const [value, setValue] = React.useState(initialValue);\n  const [isDirty, setDirty] = React.useState(false);\n  const valid = useValidation(value, validations);\n\n  const onChange = (e) => {\n    setValue(e.target.value);\n  }\n\n  const onBlur = (e) => {\n    setDirty(true);\n  }\n\n  return {\n    value,\n    onChange,\n    onBlur,\n    isDirty,\n    ...valid\n  }\n}\n\n\nconst Question = ({ question, id, isFormValid, initial }) => {\n  const val = useInput(initial, { isEmpty: true, minLength: 2 }, initial === \"\");\n\n  isFormValid().current[id] = { b: val.isInputValid, [question]: val.value };\n\n  return (\n    <div className=\"question-container\">\n      <label className=\"question\" htmlFor={`input${id}`}>{question}</label>\n\n      {(val.isDirty && val.isEmpty) && <div style={{ color: 'red' }}>Поле не может быть пустым</div>}\n      {(val.isDirty && val.isMinLength) && <div style={{ color: 'red' }}>Минимальная длина текста 2 символа</div>}\n      <input\n        id={`input${id}`}\n        className=\"answer\"\n        type=\"text\"\n        value={val.value}\n        onChange={(e) => val.onChange(e)}\n        onBlur={(e) => val.onBlur(e)}\n        name={question}\n        placeholder={\"*Введите текст\"}\n        required\n      ></input>\n    </div>\n  )\n}\n\nexport default Question;\n","import './App.css';\nimport React from 'react';\nimport Question from './components/question';\nimport Swal from 'sweetalert2';\nimport Confetti from 'react-confetti';\n\nconst App = () => {\n\n  const [questions, setQuestions] = React.useState([]);\n  const [answers, setAnswers] = React.useState({});\n  const [isLoading, setLoading] = React.useState(false);\n  const [isAllValid, setAllValid] = React.useState(true);\n  const [isSuccess, setSuccess] = React.useState(false);\n\n  let allValids = React.useRef({});\n\n  React.useEffect(() => {\n    const getchData = async () => {\n      setLoading(false);\n      const data = await fetch('data.json').then(data => data.json());\n      setQuestions(data.data);\n      setLoading(true);\n    }\n    getchData();\n  }, []);\n\n  React.useEffect(() => {\n\n    const newObj = {};\n    const localStorObject = JSON.parse(localStorage.getItem(\"QUEST\"));\n    if (localStorObject) {\n      setAnswers(localStorObject);\n      return;\n    }\n    for (let i of questions) {\n      newObj[i.question] = \"\";\n    }\n    setAnswers(newObj);\n  }, [questions]);\n\n  const isFormValid = () => {\n    return allValids;\n  }\n\n  const ques = questions.map(elem => {\n    return <Question\n      question={elem.question}\n      key={elem.id}\n      id={elem.id}\n      isFormValid={isFormValid}\n      initial={answers[elem.question]}\n    />\n  });\n\n  const onSend = (e) => {\n    let canSend = true;\n    for (const input of Object.values(allValids.current)) {\n      canSend &= input.b;\n    }\n    setAllValid(canSend);\n    const newObj = { ...answers };\n    const toLocalObject = { ...answers };\n\n    if (canSend) {\n      Object.values(allValids.current).forEach(el => {\n        const [quest, answ] = Object.entries(el)[1];\n        newObj[quest] = \"\";\n        toLocalObject[quest] = answ;\n      });\n      localStorage.setItem('QUEST', JSON.stringify(toLocalObject));\n\n      setAnswers(newObj);\n      setSuccess(true);\n      setTimeout(() => {\n        Swal.fire({\n          title: \"Сохранение даных\", text: \"Данные успешно сохранены в localStorage\", icon: \"success\", didClose: () => {\n            setSuccess(false);\n          }\n        });\n      }, 200);\n\n    }\n    e.preventDefault();\n  }\n\n  if (isSuccess) {\n    return <Confetti />\n  }\n\n  return (\n    <div className=\"form-container\">\n      {\n        isLoading\n          ? <form className=\"form\">\n            {\n              ques\n            }\n            {(!isAllValid) && <div style={{ color: \"red\" }}>Введите все поля</div>}\n            <button className=\"send-button\" onClick={onSend}>Отправить</button>\n          </form>\n          : <h1>Loading data...</h1>\n      }\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}